//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TeslaDesktopClient.TeslaCommunication {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://STM32TeslaCommunication", ConfigurationName="TeslaCommunication.ICommunicationProtocol")]
    public interface ICommunicationProtocol {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/Connect", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/ConnectResponse")]
        bool Connect(string comPortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/Connect", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/ConnectResponse")]
        System.Threading.Tasks.Task<bool> ConnectAsync(string comPortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/IsConnected", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/IsConnectedResponse")]
        bool IsConnected();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/IsConnected", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/IsConnectedResponse")]
        System.Threading.Tasks.Task<bool> IsConnectedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/Disconnect", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/DisconnectResponse")]
        void Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/Disconnect", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/ClearQueues", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/ClearQueuesResponse")]
        void ClearQueues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/ClearQueues", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/ClearQueuesResponse")]
        System.Threading.Tasks.Task ClearQueuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/setEnabled", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/setEnabledResponse")]
        void setEnabled(int fNum, bool enabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/setEnabled", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/setEnabledResponse")]
        System.Threading.Tasks.Task setEnabledAsync(int fNum, bool enabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/getFStates", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/getFStatesResponse")]
        bool[] getFStates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://STM32TeslaCommunication/ICommunicationProtocol/getFStates", ReplyAction="http://STM32TeslaCommunication/ICommunicationProtocol/getFStatesResponse")]
        System.Threading.Tasks.Task<bool[]> getFStatesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicationProtocolChannel : TeslaDesktopClient.TeslaCommunication.ICommunicationProtocol, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommunicationProtocolClient : System.ServiceModel.ClientBase<TeslaDesktopClient.TeslaCommunication.ICommunicationProtocol>, TeslaDesktopClient.TeslaCommunication.ICommunicationProtocol {
        
        public CommunicationProtocolClient() {
        }
        
        public CommunicationProtocolClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommunicationProtocolClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationProtocolClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationProtocolClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Connect(string comPortName) {
            return base.Channel.Connect(comPortName);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectAsync(string comPortName) {
            return base.Channel.ConnectAsync(comPortName);
        }
        
        public bool IsConnected() {
            return base.Channel.IsConnected();
        }
        
        public System.Threading.Tasks.Task<bool> IsConnectedAsync() {
            return base.Channel.IsConnectedAsync();
        }
        
        public void Disconnect() {
            base.Channel.Disconnect();
        }
        
        public System.Threading.Tasks.Task DisconnectAsync() {
            return base.Channel.DisconnectAsync();
        }
        
        public void ClearQueues() {
            base.Channel.ClearQueues();
        }
        
        public System.Threading.Tasks.Task ClearQueuesAsync() {
            return base.Channel.ClearQueuesAsync();
        }
        
        public void setEnabled(int fNum, bool enabled) {
            base.Channel.setEnabled(fNum, enabled);
        }
        
        public System.Threading.Tasks.Task setEnabledAsync(int fNum, bool enabled) {
            return base.Channel.setEnabledAsync(fNum, enabled);
        }
        
        public bool[] getFStates() {
            return base.Channel.getFStates();
        }
        
        public System.Threading.Tasks.Task<bool[]> getFStatesAsync() {
            return base.Channel.getFStatesAsync();
        }
    }
}
